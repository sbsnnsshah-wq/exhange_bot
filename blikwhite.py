import os
import json
import dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

dotenv.load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
DATA_FILE = "data.json"

if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, ensure_ascii=False, indent=4)

def load_data():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

menu_keyboard = ReplyKeyboardMarkup(
    [["üí∞ –í—ã–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å", "‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å USDT"],
     ["üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å BLIK-–∫–æ–¥", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = load_data()
    if str(user.id) not in data:
        data[str(user.id)] = {
            "username": user.username,
            "balance": 0,
            "usdt_address": None,
            "pending": None
        }
        save_data(data)

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–º–µ–Ω–Ω–∏–∫.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=menu_keyboard
    )

async def payout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∏ –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤—ã–ø–ª–∞—á–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª—ë–∫ USDT (TRC20) "
        "–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

async def change_usdt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì© –ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å USDT (TRC20):"
    )
    context.user_data["awaiting_usdt"] = True

async def send_blik(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ PLN:")
    context.user_data["awaiting_amount"] = True

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: [@phoenlx_black](https://t.me/phoenlx_black)",
        parse_mode="Markdown"
    )

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    keyboard = [
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="list_users")],
        [InlineKeyboardButton("üí∏ –ë–∞–ª–∞–Ω—Å—ã", callback_data="list_balances")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫", callback_data="list_pending")]
    ]
    await update.message.reply_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    data = load_data()

    if context.user_data.get("awaiting_usdt"):
        address = update.message.text.strip()
        if not (address.startswith("T") and len(address) == 34):
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TRC20-–∞–¥—Ä–µ—Å–∞.")
            return
        data[user_id]["usdt_address"] = address
        save_data(data)
        context.user_data.pop("awaiting_usdt")
        await update.message.reply_text(f"‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {address}")
    elif context.user_data.get("awaiting_amount"):
        try:
            amount = float(update.message.text)
            data[user_id]["pending"] = {
                "amount": amount,
                "status": "–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            }
            save_data(data)
            context.user_data.pop("awaiting_amount")

            keyboard = [
                [InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –≤–≤–æ–¥ BLIK", callback_data=f"allow_{user_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny_{user_id}")]
            ]
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üí≥ –ó–∞—è–≤–∫–∞ –æ—Ç @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}\n"
                     f"–°—É–º–º–∞: {amount} PLN\n"
                     f"ID: {user_id}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            await update.message.reply_text("‚åõ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    elif context.user_data.get("awaiting_blik"):
        code = update.message.text.strip()
        amount = data[user_id]["pending"]["amount"]

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì® –ù–æ–≤—ã–π BLIK-–∫–æ–¥ –æ—Ç @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}\n"
                 f"üí∞ –°—É–º–º–∞: {amount} PLN\n"
                 f"üî¢ –ö–æ–¥: {code}\n"
                 f"ID: {user_id}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
            ])
        )
        await update.message.reply_text("üì© –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        context.user_data.pop("awaiting_blik", None)
    else:
        await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

async def callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = load_data()
    await query.answer()

    if not query.data:
        return

    if query.data.startswith("allow_"):
        uid = query.data.split("_")[1]
        await context.bot.send_message(
            chat_id=int(uid),
            text="‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–∏–ª –≤–≤–æ–¥–∏—Ç—å BLIK-–∫–æ–¥.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞:"
        )
        await query.edit_message_text("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ –≤–≤–æ–¥–∏—Ç—å BLIK.")
    elif query.data.startswith("deny_"):
        uid = query.data.split("_")[1]
        await context.bot.send_message(chat_id=int(uid), text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    elif query.data.startswith("accept_"):
        uid = query.data.split("_")[1]
        data[uid]["balance"] += data[uid]["pending"]["amount"]
        data[uid]["pending"]["status"] = "–æ–¥–æ–±—Ä–µ–Ω–æ"
        save_data(data)
        await context.bot.send_message(chat_id=int(uid), text="‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç, –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await query.edit_message_text("‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç.")
    elif query.data.startswith("reject_"):
        uid = query.data.split("_")[1]
        data[uid]["pending"]["status"] = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        save_data(data)
        await context.bot.send_message(chat_id=int(uid), text="‚ùå –ö–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        await query.edit_message_text("‚ùå –ö–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    elif query.data == "list_users":
        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for uid, info in data.items():
            text += f"‚Ä¢ @{info.get('username', '–ë–µ–∑ –Ω–∏–∫–∞')} (ID: {uid})\n"
        await query.edit_message_text(text or "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    elif query.data == "list_balances":
        text = "üí∏ –ë–∞–ª–∞–Ω—Å—ã:\n"
        for uid, info in data.items():
            text += f"@{info.get('username', '–ë–µ–∑ –Ω–∏–∫–∞')} ‚Äî {info.get('balance', 0):.2f} PLN\n"
        await query.edit_message_text(text or "–ë–∞–ª–∞–Ω—Å—ã –ø—É—Å—Ç—ã.")
    elif query.data == "list_pending":
        text = "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫:\n"
        for uid, info in data.items():
            p = info.get("pending")
            if p:
                text += f"@{info.get('username', '–ë–µ–∑ –Ω–∏–∫–∞')} ‚Äî {p['amount']} PLN ({p['status']})\n"
        await query.edit_message_text(text or "–ù–µ—Ç –∑–∞—è–≤–æ–∫.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CallbackQueryHandler(callbacks))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.Regex("üí∞ –í—ã–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å"), payout))
    app.add_handler(MessageHandler(filters.Regex("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å USDT"), change_usdt))
    app.add_handler(MessageHandler(filters.Regex("üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å BLIK-–∫–æ–¥"), send_blik))
    app.add_handler(MessageHandler(filters.Regex("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), support))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
